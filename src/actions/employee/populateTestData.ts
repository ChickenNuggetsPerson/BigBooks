'use server'

import { getSession } from "@/auth/auth";
import { prisma } from "@/database/prisma";
import { revalidatePath } from "next/cache";
import { redirect } from "next/navigation";
import { faker } from '@faker-js/faker'
import { Prisma } from "@/database/generated/prisma";





export default async function populateTestData() {

    if (process.env.NODE_ENV !== "development") { return }
    const session = await getSession()
    if (!session) { return }

    const org = await prisma.organization.findUnique({
        where: { uuid: session.orgUUID },
        include: { payrollGroups: true },
    })

    if (!org) throw new Error('Organization not found.')

    // Use existing group or create one
    const payrollGroup =
        org.payrollGroups[0] ??
        (await prisma.payrollGroup.create({
            data: {
                name: 'Default Group',
                description: 'Autogenerated group',
                organizationId: org.uuid,
            },
        }))

    for (let i = 0; i < 50; i++) {
        const employee = await prisma.employee.create({
            data: {
                firstName: faker.person.firstName(),
                lastName: faker.person.lastName(),
                email: faker.internet.email(),
                phoneNumber: faker.phone.number(),
                ssn: faker.string.numeric(9),
                organizationId: org.uuid,
            },
        })

        // Add payroll items (earning and tax)
        await Promise.all([
            prisma.payrollItem.create({
                data: {
                    employeeId: employee.uuid,
                    name: '401K Contribution',
                    description: null,
                    type: 'Other',
                    amount: new Prisma.Decimal(-0.042),
                },
            }),
            prisma.payrollItem.create({
                data: {
                    employeeId: employee.uuid,
                    name: 'Federal Tax',
                    description: 'Standard federal deduction',
                    type: 'Tax',
                    percent: new Prisma.Decimal(-0.021),
                    amount: new Prisma.Decimal(0), // for percent-based
                },
            }),
        ])

        // Compensation
        if (Math.floor(Math.random() * 100) % 2 == 0) {
            await prisma.employeeCompensation.create({
                data: {
                    employeeId: employee.uuid,
                    payrollGroupId: payrollGroup.uuid,
                    isSalary: true,
                    salaryAmount: new Prisma.Decimal(50000 + Math.random() * 20000),
                },
            })
        } else {

            const rnd = Math.floor(Math.random() * 100) % 2 == 0

            await prisma.employeeCompensation.create({
                data: {
                    employeeId: employee.uuid,
                    payrollGroupId: payrollGroup.uuid,
                    isSalary: false,
                    hourlyRates: {
                        create: {
                            name: "Regular",
                            rate: 10 + (Math.random() * 20),
                            canOvertime: rnd
                        }
                    }
                },
            })
        }

        console.log(`Created test employee: ${employee.firstName} ${employee.lastName}`)
    }

    console.log('Finished populating test employees.')


    revalidatePath("/organization/employee")
    redirect("/organization/employee")
}